Index: stringbuffer.h
===================================================================
--- stringbuffer.h	(revision 15910)
+++ stringbuffer.h	(revision 15911)
@@ -18,25 +18,25 @@
 
 	GenericStringBuffer(Allocator* allocator = 0, size_t capacity = kDefaultCapacity) : stack_(allocator, capacity) {}
 
-	void Put(Ch c) { *stack_.template Push<Ch>() = c; }
+	void Put(Ch c) { *stack_.Push() = c; }
 	void Flush() {}
 
 	void Clear() { stack_.Clear(); }
-	Ch* Push(size_t count) { return stack_.template Push<Ch>(count); }
-	void Pop(size_t count) { stack_.template Pop<Ch>(count); }
+	Ch* Push(size_t count) { return stack_.Push(count); }
+	void Pop(size_t count) { stack_.Pop(count); }
 
 	const Ch* GetString() const {
 		// Push and pop a null terminator. This is safe.
-		*stack_.template Push<Ch>() = '\0';
-		stack_.template Pop<Ch>(1);
+		*stack_.Push() = '\0';
+		stack_.Pop(1);
 
-		return stack_.template Bottom<Ch>();
+		return stack_.Bottom();
 	}
 
 	size_t GetSize() const { return stack_.GetSize(); }
 
 	static const size_t kDefaultCapacity = 256;
-	mutable internal::Stack<Allocator> stack_;
+	mutable internal::Stack<Ch,Allocator> stack_;
 };
 
 //! String buffer with UTF8 encoding
@@ -45,7 +45,7 @@
 //! Implement specialized version of PutN() with memset() for better performance.
 template<>
 inline void PutN(GenericStringBuffer<UTF8<> >& stream, char c, size_t n) {
-	memset(stream.stack_.Push<char>(n), c, n * sizeof(c));
+	memset(stream.stack_.Push(n), c, n * sizeof(c));
 }
 
 } // namespace rapidjson
Index: reader.h
===================================================================
--- reader.h	(revision 15910)
+++ reader.h	(revision 15911)
@@ -572,12 +572,12 @@
 	public:
 		typedef typename TargetEncoding::Ch Ch;
 
-		StackStream(internal::Stack<Allocator>& stack) : stack_(stack), length_(0) {}
+		StackStream(internal::Stack<Ch,Allocator>& stack) : stack_(stack), length_(0) {}
 		RAPIDJSON_FORCEINLINE void Put(Ch c) {
-			*stack_.template Push<Ch>() = c;
+			*stack_.Push() = c;
 			++length_;
 		}
-		internal::Stack<Allocator>& stack_;
+		internal::Stack<Ch,Allocator>& stack_;
 		SizeType length_;
 
 	private:
@@ -604,7 +604,7 @@
 			StackStream stackStream(stack_);
 			ParseStringToStream<parseFlags, SourceEncoding, TargetEncoding>(s, stackStream);
 			RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
-			if (!handler.String(stack_.template Pop<typename TargetEncoding::Ch>(stackStream.length_), stackStream.length_ - 1, true))
+			if (!handler.String(stack_.Pop(stackStream.length_), stackStream.length_ - 1, true))
 				RAPIDJSON_PARSE_ERROR(kParseErrorTermination, s.Tell());
 		}
 	}
@@ -631,7 +631,7 @@
 			if (c == '\\') {	// Escape
 				is.Take();
 				Ch e = is.Take();
-				if ((sizeof(Ch) == 1 || unsigned(e) < 256) && escape[(unsigned char)e]) {
+				if ((sizeof(Ch) == 1 || ((c & 0xFF) == c) ) && escape[(unsigned char)e]) {
 					os.Put(escape[(unsigned char)e]);
 				}
 				else if (e == 'u') {	// Unicode
@@ -916,7 +916,7 @@
 #undef N
 #undef N16
 		
-		if (sizeof(Ch) == 1 || unsigned(c) < 256)
+		if (sizeof(Ch) == 1 || ((c & 0xFF) == c) )
 			return (Token)tokenMap[(unsigned char)c];
 		else
 			return NumberToken;
@@ -1106,9 +1106,9 @@
 			else if (src == IterativeParsingKeyValueDelimiterState)
 				n = IterativeParsingMemberValueState;
 			// Push current state.
-			*stack_.template Push<SizeType>(1) = n;
+			*stack_.Push(1) = n;
 			// Initialize and push the member/element count.
-			*stack_.template Push<SizeType>(1) = 0;
+			*stack_.Push(1) = 0;
 			// Call handler
 			bool hr = (dst == IterativeParsingObjectInitialState) ? handler.StartObject() : handler.StartArray();
 			// On handler short circuits the parsing.
@@ -1157,18 +1157,18 @@
 		case IterativeParsingElementDelimiterState:
 			is.Take();
 			// Update member/element count.
-			*stack_.template Top<SizeType>() = *stack_.template Top<SizeType>() + 1;
+			*stack_.Top() = (typename TargetEncoding::Ch)(*stack_.Top() + 1);
 			return dst;
 
 		case IterativeParsingObjectFinishState:
 		{
 			// Get member count.
-			SizeType c = *stack_.template Pop<SizeType>(1);
+			SizeType c = *stack_.Pop(1);
 			// If the object is not empty, count the last member.
 			if (src == IterativeParsingMemberValueState)
 				++c;
 			// Restore the state.
-			IterativeParsingState n = static_cast<IterativeParsingState>(*stack_.template Pop<SizeType>(1));
+			IterativeParsingState n = static_cast<IterativeParsingState>(*stack_.Pop(1));
 			// Transit to Finish state if this is the topmost scope.
 			if (n == IterativeParsingStartState)
 				n = IterativeParsingFinishState;
@@ -1188,12 +1188,12 @@
 		case IterativeParsingArrayFinishState:
 		{
 			// Get element count.
-			SizeType c = *stack_.template Pop<SizeType>(1);
+			SizeType c = *stack_.Pop(1);
 			// If the array is not empty, count the last element.
 			if (src == IterativeParsingElementState)
 				++c;
 			// Restore the state.
-			IterativeParsingState n = static_cast<IterativeParsingState>(*stack_.template Pop<SizeType>(1));
+			IterativeParsingState n = static_cast<IterativeParsingState>(*stack_.Pop(1));
 			// Transit to Finish state if this is the topmost scope.
 			if (n == IterativeParsingStartState)
 				n = IterativeParsingFinishState;
@@ -1269,7 +1269,7 @@
 	}
 
 	static const size_t kDefaultStackCapacity = 256;	//!< Default stack capacity in bytes for storing a single decoded string.
-	internal::Stack<Allocator> stack_;	//!< A stack for storing decoded string temporarily during non-destructive parsing.
+	internal::Stack<typename TargetEncoding::Ch,Allocator> stack_;	//!< A stack for storing decoded string temporarily during non-destructive parsing.
 	ParseResult parseResult_;
 }; // class GenericReader
 
Index: writer.h
===================================================================
--- writer.h	(revision 15910)
+++ writer.h	(revision 15911)
@@ -131,7 +131,7 @@
 
 	bool StartObject() {
 		Prefix(kObjectType);
-		new (level_stack_.template Push<Level>()) Level(false);
+		new (level_stack_.Push()) Level(false);
 		return WriteStartObject();
 	}
 
@@ -139,7 +139,7 @@
 		(void)memberCount;
 		RAPIDJSON_ASSERT(level_stack_.GetSize() >= sizeof(Level));
 		RAPIDJSON_ASSERT(!level_stack_.template Top<Level>()->inArray);
-		level_stack_.template Pop<Level>(1);
+		level_stack_.Pop(1);
 		bool ret = WriteEndObject();
 		if (level_stack_.Empty())	// end of json text
 			os_->Flush();
@@ -148,7 +148,7 @@
 
 	bool StartArray() {
 		Prefix(kArrayType);
-		new (level_stack_.template Push<Level>()) Level(true);
+		new (level_stack_.Push()) Level(true);
 		return WriteStartArray();
 	}
 
@@ -156,7 +156,7 @@
 		(void)elementCount;
 		RAPIDJSON_ASSERT(level_stack_.GetSize() >= sizeof(Level));
 		RAPIDJSON_ASSERT(level_stack_.template Top<Level>()->inArray);
-		level_stack_.template Pop<Level>(1);
+		level_stack_.Pop(1);
 		bool ret = WriteEndArray();
 		if (level_stack_.Empty())	// end of json text
 			os_->Flush();
@@ -312,7 +312,7 @@
 				else
 					return false;	// invalid code point
 			}
-			else if ((sizeof(Ch) == 1 || (unsigned)c < 256) && escape[(unsigned char)c])  {
+			else if ( ((sizeof(Ch) == 1) | ((c & 0xFF) == c)) && escape[(unsigned char)c]) {
 				is.Take();
 				os_->Put('\\');
 				os_->Put(escape[(unsigned char)c]);
@@ -338,7 +338,7 @@
 	void Prefix(Type type) {
 		(void)type;
 		if (level_stack_.GetSize() != 0) { // this value is not at root
-			Level* level = level_stack_.template Top<Level>();
+			Level* level = level_stack_.Top();
 			if (level->valueCount > 0) {
 				if (level->inArray) 
 					os_->Put(','); // add comma if it is not the first element in array
@@ -357,7 +357,7 @@
 	}
 
 	OutputStream* os_;
-	internal::Stack<Allocator> level_stack_;
+	internal::Stack<Level,Allocator> level_stack_;
 	int doublePrecision_;
 	bool hasRoot_;
 
Index: document.h
===================================================================
--- document.h	(revision 15910)
+++ document.h	(revision 15911)
@@ -1405,7 +1405,7 @@
 	}
 
 	static const size_t kDefaultStackCapacity = 1024;
-	internal::Stack<Allocator> stack_;
+	internal::Stack<ValueType,Allocator> stack_;
 	ParseResult parseResult_;
 };
 
Index: internal/itoa.h
===================================================================
--- internal/itoa.h	(revision 15910)
+++ internal/itoa.h	(revision 15911)
@@ -74,7 +74,7 @@
             *buffer++ = cDigitsLut[i + 1];
         }
         else
-            *buffer++ = '0' + static_cast<char>(a);
+            *buffer++ = static_cast<char>('0' + a);
 
         const uint32_t b = value / 10000; // 0 to 9999
         const uint32_t c = value % 10000; // 0 to 9999
@@ -201,7 +201,7 @@
         value %= UINT64_C(10000000000000000);
         
         if (a < 10)
-            *buffer++ = '0' + static_cast<char>(a);
+            *buffer++ = (char)('0' + a);
         else if (a < 100) {
             const uint32_t i = a << 1;
             *buffer++ = cDigitsLut[i];
@@ -208,7 +208,7 @@
             *buffer++ = cDigitsLut[i + 1];
         }
         else if (a < 1000) {
-            *buffer++ = '0' + static_cast<char>(a / 100);
+            *buffer++ = static_cast<char>('0' +  a / 100);
             
             const uint32_t i = (a % 100) << 1;
             *buffer++ = cDigitsLut[i];
Index: internal/stack.h
===================================================================
--- internal/stack.h	(revision 15910)
+++ internal/stack.h	(revision 15911)
@@ -10,14 +10,14 @@
 //! A type-unsafe stack for storing different types of data.
 /*! \tparam Allocator Allocator for allocating stack memory.
 */
-template <typename Allocator>
+template <typename T,typename Allocator>
 class Stack {
 public:
-	Stack(Allocator* allocator, size_t stack_capacity) : allocator_(allocator), own_allocator_(0), stack_(0), stack_top_(0), stack_end_(0), stack_capacity_(stack_capacity) {
+	Stack(Allocator* allocator, size_t stack_capacity) : allocator_(allocator), own_allocator_(0), stack_(0), stack_top_(0), stack_end_(0), stack_capacity_(stack_capacity/sizeof(T)) {
 		RAPIDJSON_ASSERT(stack_capacity_ > 0);
 		if (!allocator_)
 			own_allocator_ = allocator_ = new Allocator();
-		stack_top_ = stack_ = (char*)allocator_->Malloc(stack_capacity_);
+		stack_top_ = stack_ = (T*)allocator_->Malloc(stack_capacity_*sizeof(T));
 		stack_end_ = stack_ + stack_capacity_;
 	}
 
@@ -30,18 +30,18 @@
 
 	// Optimization note: try to minimize the size of this function for force inline.
 	// Expansion is run very infrequently, so it is moved to another (probably non-inline) function.
-	template<typename T>
+	//template<typename T>
 	RAPIDJSON_FORCEINLINE T* Push(size_t count = 1) {
 		 // Expand the stack if needed
-		if (stack_top_ + sizeof(T) * count >= stack_end_)
-			Expand<T>(count);
+		if (stack_top_ + count >= stack_end_)
+			Expand(count);
 
-		T* ret = reinterpret_cast<T*>(stack_top_);
-		stack_top_ += sizeof(T) * count;
+		T* ret = stack_top_;
+		stack_top_ +=  count;
 		return ret;
 	}
 
-	template<typename T>
+	//template<typename T>
 	T* Pop(size_t count) {
 		RAPIDJSON_ASSERT(GetSize() >= count * sizeof(T));
 		stack_top_ -= count * sizeof(T);
@@ -48,13 +48,13 @@
 		return reinterpret_cast<T*>(stack_top_);
 	}
 
-	template<typename T>
+	//template<typename T>
 	T* Top() { 
 		RAPIDJSON_ASSERT(GetSize() >= sizeof(T));
 		return reinterpret_cast<T*>(stack_top_ - sizeof(T));
 	}
 
-	template<typename T>
+	//template<typename T>
 	T* Bottom() { return (T*)stack_; }
 
 	Allocator& GetAllocator() { return *allocator_; }
@@ -63,14 +63,14 @@
 	size_t GetCapacity() const { return stack_capacity_; }
 
 private:
-	template<typename T>
+	//template<typename T>
 	void Expand(size_t count) {
 		size_t new_capacity = stack_capacity_ * 2;
 		size_t size = GetSize();
-		size_t new_size = GetSize() + sizeof(T) * count;
+		size_t new_size = GetSize() + count;
 		if (new_capacity < new_size)
 			new_capacity = new_size;
-		stack_ = (char*)allocator_->Realloc(stack_, stack_capacity_, new_capacity);
+		stack_ = (T*)allocator_->Realloc(stack_, stack_capacity_*sizeof(T), new_capacity * sizeof(T));
 		stack_capacity_ = new_capacity;
 		stack_top_ = stack_ + size;
 		stack_end_ = stack_ + stack_capacity_;
@@ -82,9 +82,9 @@
 
 	Allocator* allocator_;
 	Allocator* own_allocator_;
-	char *stack_;
-	char *stack_top_;
-	char *stack_end_;
+	T *stack_;
+	T *stack_top_;
+	T *stack_end_;
 	size_t stack_capacity_;
 };
 
