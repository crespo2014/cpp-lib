/*
 *   Copyright 2005 The Apache Software Foundation.
// (c) Copyright IBM Corp. 2005 All Rights Reserved
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
/**
 * @file AxisCPPConfigDefaults.hpp
 *
 *
 */
#ifndef AXISCPPCONFIGDEFAULTS_INCLUDED
#define AXISCPPCONFIGDEFAULTS_INCLUDED

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/* NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE   */
/* ----------------------------------------------------------------   */
/* THIS HEADER FILE PATTERNED AFTER CORRESPONDING hpp HEADER FILE.    */
/* CHANGES TO hpp HEADER FILE MAY NEED TO BE PROPAGATED HERE AND IN   */
/* THE IMPLEMEMTATION OF THE C APIS.                                  */
/*                                                                    */
/* THIS FILE GENERATED BY CBINDINGGENERATOR TOOL.                     */
/* ----------------------------------------------------------------   */
/* NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE   */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

#ifdef __cplusplus
 extern "C" {
#endif


#include <axis/GDefine.h>

/**
 *   @class AxisCPPConfigDefaults
 *   @brief class for programmatically setting configuration defaults.
 *   
 *   AxisCPPConfigDefaults allows you to apply new configuration 
 *   defaults, prior to the instantiation of the first web service
 *   class in the application. These programmer-set defaults may be
 *   over-ridden by the external factors, such as..
 *    - the values in axiscpp.conf
 *    - the value of AXISCPP_DEPLOY
 * 
 *   The get/set methods don't have any effect on the ACTUAL defaults. They
 *   are mearly a bundle of values which are set on the ACTUAL defaults when
 *   the apply() method is issued.
 * 
 *   It consists of...
 *   (a) get/set methods for each of the values to be found
 *       in the configuration file, namely:
 *       - ClientLog
 *       - ClientWSDDFile
 *       - XMLParserLibrary
 *       - HTTPTransportLibrary
 *       - HTTPChannelLibrary
 *       - HTTPSSLChannelLibrary 
 *       - NodeName
 *       - ListenPort
 *       - SecureInfo
 *       When the first web-services class is instantiated any values set in the config 
 *       file would over-ride those set by this class.
 *   (b) get/set methods for AxisHome 
 *       This is the programmatic equivaluent of the AXISCPP_DEPLOY
 *       environment variable.
 *       When the first class is instantiated, if AXISCPP_DEPLOY is set 
 *       it will over-ride the value set by this class.
 *   (c) The apply() method takes any values that have been set on the object
 *       and set them as the Axis CPP defaults for this process. 
 * 
 *   Exceptions thrown: AxisConfigException
 * 
 *       Once the first web service is instantiated, new defaults may no longer
 *       be applied. If this is attempted an AxisConfigException is thrown.
 * 
 *   Usage examples
 *   (a) Setting the location of the axiscpp.conf file to the 
 *      "current working directory"
 * 
 *      AxisCPPDefaultConfig defConfig;
 *      defConfig.setAxisHome(".");
 *      defConfig.apply();
 * 
 * 
 */
/*
 * Forward declarations.
 */
/*
 * Class definition.
 */
AXISC_STORAGE_CLASS_INFO AXISCHANDLE axiscCreateAxisCPPConfigDefaults();
AXISC_STORAGE_CLASS_INFO void axiscDestroyAxisCPPConfigDefaults(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetClientLog(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetClientWSDDFile(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetXMLParserLibrary(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetHTTPTransportLibrary(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetHTTPChannelLibrary(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetHTTPSSLChannelLibrary(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetNodeName(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetListenPort(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetSecureInfo(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO char * axiscGetAxisHome(AXISCHANDLE axisCPPConfigDefaults);
AXISC_STORAGE_CLASS_INFO void axiscSetClientLog(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscSetClientWSDDFile(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscSetXMLParserLibrary(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscSetHTTPTransportLibrary(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscSetHTTPChannelLibrary(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscSetHTTPSSLChannelLibrary(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscSetNodeName(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscSetListenPort(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscSetSecureInfo(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscSetAxisHome(AXISCHANDLE axisCPPConfigDefaults, char * );
AXISC_STORAGE_CLASS_INFO void axiscApply(AXISCHANDLE axisCPPConfigDefaults);


#ifdef __cplusplus
 }
#endif

#endif /* AXISCPPCONFIGDEFAULTS_INCLUDED */
